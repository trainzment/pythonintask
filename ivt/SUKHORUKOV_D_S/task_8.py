# Задача 8.
# Доработайте игру "Анаграммы" (см. М.Доусон Программируем на Python. Гл.4)
# так, чтобы к каждому слову полагалась подсказка. Игрок должен получать право на
# подсказку в том случае, если у него нет никаких предположений. Разработайте
# систему начисления очков, по которой бы игроки, отгадавшие слово без подсказки,
# получали больше тех, кто запросил подсказку.

# Сухоруков Д. С.

# 28.03.17

# Анаграммы (Word Jumble)
#
# Компьютер выбирает какое-либо слово и хаотически переставляет его буквы
# Задача игрока - восстановить исходное слово

import random, string

# Слова с подсказками
WORDS=(
("сапсан", "Хищная птица сем. соколиных, род сокола. Ловчий с."), 
("унисон", "Созвучие из двух или нескольких звуков одинаковой высоты, воспроизводимых разными голосами или инструментами."), 
("художник", "Человек, к-рый творчески работает в какой-н. области искусства. "), 
("оазис", "Место в пустыне или полупустыне, где есть растительность и вода."), 
("ребро", "Одна из нескольких парных дугообразных плоских костей, идущих от позвоночника к грудной кости и составляющих грудную клетку."), 
("ураган", "Ветер разрушительной силы"),
("компьютер", "Электронная вычислительная машина (ЭВМ)"),
("олень", "Крупное парнокопытное животное с ветвистыми рогами."),
("виноград", "Южное лиановое растение со сладкими ягодами, а также ягоды этого растения, идущие в пищу, на изготовление вина")
)

# случайным образом выберем из последовательности одно слово:
word = random.choice(WORDS)

# Тут разные параметры игры
question        = word[0]	# слово, из которого делаем анаграмму
helper          = word[1] 	# побуквенная подсказка в случае неудачного ответа
correct         = question 	# правильный ответ
helpkey         = "helpme"      # комманда длдя вызова подсказки
tryes           = 1 		# записываем количество попыток игрока
scale           = len(question) # длина загаданного слова
max_score       = 200 * scale	# максимум  очков игрок получит
current_score   = max_score     # текущее количество очков
penalty_error   = 20 * scale    # минимальный штраф за ошибку  в слове
penalty_prompt  = 200           # штраф за использование подсказки

# создадим Анаграмму
jumble =""
while question:
	position = random.randrange(len(question)) 
	jumble += question[position]
	question = question[:position] + question[(position + 1):]

# начало игры
print(
"""
                 Добро пожаловать в игру 'Анаграммы'!
     Надо переставить буквы так. чтобы получилось осмысленное слово.
         (Для выхода нажмите Enter. не вводя своей версии.)
"""
)
print("Boт анаграмма:", jumble) 
print("За правильный ответ Вы заработаете",max_score,"очков\n")

#  Сама логика игры тут
guess = input("Попробуйте отгадать исходное слово\n   или введите "+ helpkey+ ":  ")

while guess != correct and guess != "" :
# Вызвали подсказку?   Получайте:
	if guess == helpkey:
		current_score-=penalty_prompt   
		print("Подсказка:",helper)
		print("\nВы потеряли ",penalty_prompt," очков")
	else:
	
		print("K сожалению вы неправы. ")
		print("Начало слова:", correct[:tryes])
		print("Вы потеряли ",penalty_error*tryes," очков")
		current_score-=penalty_error*tryes
		tryes+=1
	guess = input("\nПопробуйте ещё раз отгадать исходное слово  \n   или введите "+ helpkey+ ":  ") 

	#  если количество попыток совпадает с длинной слова, то игрок проиграл:
	if tryes == scale:
		print("\nВы проиграли! \nПравильное слово:",correct,"\nИгра окончена...")
		break
# в случае верного ответа:
if guess == correct: 
	print("Дa. именно так! Вы отгадали!\n")
	print("Вы заработали: ", current_score, "очков из",max_score,"\nИспользовали попыток:",tryes)
print("Cnacибo за игру.")
input("\n\nHaжмитe Enter. чтобы выйти.") 


